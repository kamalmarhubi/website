<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kamal Marhubi</title>
    <description></description>
    <link>http://kamalmarhubi.com/</link>
    <atom:link href="http://kamalmarhubi.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 01 Jun 2015 23:48:42 -0400</pubDate>
    <lastBuildDate>Mon, 01 Jun 2015 23:48:42 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>A list of Linux IPC mechanisms</title>
        <description>&lt;p&gt;Here is a list of Linux inter-process communication mechanisms that I know of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pipes&lt;/li&gt;
  &lt;li&gt;FIFOs&lt;/li&gt;
  &lt;li&gt;POSIX IPC (semaphores, message queues, shared memory)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;memfd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;UNIX domain sockets&lt;/li&gt;
  &lt;li&gt;TCP/UDP sockets on loopback interface&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;eventfd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;splice&lt;/code&gt; and friends&lt;/li&gt;
  &lt;li&gt;signals&lt;/li&gt;
  &lt;li&gt;the filesystem, including &lt;code&gt;mmap&lt;/code&gt;‘ed files&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;process_vm_readv&lt;/code&gt; and &lt;code&gt;process_vm_writev&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ptrace&lt;/code&gt; with &lt;code&gt;PTRACE_PEEK{TEXT,DATA,USER}&lt;/code&gt; and &lt;code&gt;PTRACE_POKE{TEXT,DATA,USER}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll link or explain them a bit better soon, but for now I just want to collect them. If you know of any I’m missing, please &lt;a href=&quot;https://twitter.com/kamalmarhubi&quot;&gt;tweet&lt;/a&gt; or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#107;&amp;#097;&amp;#109;&amp;#097;&amp;#108;&amp;#064;&amp;#109;&amp;#097;&amp;#114;&amp;#104;&amp;#117;&amp;#098;&amp;#105;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;email&lt;/a&gt; me!&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/01/a-list-of-linux-ipc-mechanisms/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/01/a-list-of-linux-ipc-mechanisms/</guid>
        
        
      </item>
    
      <item>
        <title>The excellence of uniform build and test infrastructure</title>
        <description>&lt;p&gt;I made some small amount of progress on &lt;a href=&quot;http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/&quot;&gt;yesterday’s yaks&lt;/a&gt;. I have
almost got to the point where think that the tests work on both OS X
and Linux; I just need to get some time on a Mac to be sure.&lt;/p&gt;

&lt;p&gt;The experience so far has made me realise how powerful it is to have
uniform build and test infrastructure. At Google, an improvement as
small as I’m making would take not much longer than it takes to write
the code. Everything is in &lt;a href=&quot;http://danluu.com/monorepo/&quot;&gt;one reository&lt;/a&gt;, and all tests are
run with the same &lt;a href=&quot;http://bazel.io/&quot;&gt;tool&lt;/a&gt;. As a result, you simply make your
change, run the tests, and then send it for review.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/jparyani/pycapnp&quot;&gt;project&lt;/a&gt; I’m changing has a test suite. For local testing,
you run either &lt;code&gt;py.test&lt;/code&gt; to run with the current Python environment, or
&lt;code&gt;tox&lt;/code&gt; to run a &lt;a href=&quot;https://github.com/jparyani/pycapnp/blob/790bdce72ab3f2b6c203f00eaf07e6d605aa631a/tox.ini#L2&quot;&gt;collection of environments&lt;/a&gt;. In the CI build,
the tests are run with &lt;code&gt;py.test&lt;/code&gt; under a &lt;a href=&quot;https://github.com/jparyani/pycapnp/blob/790bdce72ab3f2b6c203f00eaf07e6d605aa631a/.travis.yml#L6-11&quot;&gt;set of environments&lt;/a&gt; which defined by Travis CI’s infrastructure.&lt;/p&gt;

&lt;p&gt;This difference between local tests and tests under CI is quite
frustrating, especially given that the CI runs take many minutes to get
scheduled and run. I can get to the Works On My Machine™ state, but have
the CI build fail because the environment is different. To say I spent
most of yesterday and today refreshing CI build pages wouldn’t be too
inaccurate!&lt;/p&gt;

&lt;p&gt;Even more, Travis CI recently changed its default from virtualized
infrastructure to containerized infrastructure. The differences seem to
be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;containerized infrastructure schedules and runs quicker&lt;/li&gt;
  &lt;li&gt;containerized infrastructure won’t run setuid programs such as
sudo, which is used in this project’s &lt;a href=&quot;https://github.com/jparyani/pycapnp/blob/aa7d5303193b13880728035c298c635e4fdcbe1c/buildutils/setup_travis.sh#L7-11&quot;&gt;environment set up&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, they only applied this new default to repositories created
after some &lt;a href=&quot;https://github.com/travis-ci/travis-core/blob/7a360299c19011cbd3c0f2bf099a16600048e210/lib/travis/model/job/queue.rb#L88&quot;&gt;cutoff date&lt;/a&gt;.&lt;sup id=&quot;fnref:sudo-detection&quot;&gt;&lt;a href=&quot;#fn:sudo-detection&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; This meant that the
exact same commit that &lt;a href=&quot;https://travis-ci.org/jparyani/pycapnp/builds/61183652&quot;&gt;passes&lt;/a&gt; in the upstream CI build &lt;a href=&quot;https://travis-ci.org/kamalmarhubi/pycapnp/builds/64316652&quot;&gt;would
fail&lt;/a&gt; in a new clone.&lt;sup id=&quot;fnref:refactor&quot;&gt;&lt;a href=&quot;#fn:refactor&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Certainly not intuitive!&lt;/p&gt;

&lt;p&gt;I’m really interested to see how different projects approach this
problem. Having such a uniform infrastructure is a luxury that not many
can afford!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sudo-detection&quot;&gt;

      &lt;p&gt;The attentive reader may wonder about the &lt;code&gt;sudo_detected&lt;/code&gt; method
call there: shouldn’t that have prevented this from being a
problem?  Sadly, it looks as though this detection simply looks at
invocations directly specified in &lt;code&gt;.travis.yml&lt;/code&gt;, and makes no
attempt to find indirect invocations. &lt;a href=&quot;#fnref:sudo-detection&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:refactor&quot;&gt;

      &lt;p&gt;I’m not even going into how at Google, all projects would
have been tested with and without the new configuration. It would
then be &lt;a href=&quot;http://danluu.com/monorepo/#cross-project-changes&quot;&gt;fairly easy&lt;/a&gt; to send an automated change
&lt;a href=&quot;https://github.com/jparyani/pycapnp/commit/790bdce72ab3f2b6c203f00eaf07e6d605aa631a&quot;&gt;updating the configuration&lt;/a&gt; to any project that was
newly failing with the new CI configuration. &lt;a href=&quot;#fnref:refactor&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 28 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/28/the-excellence-uniform-build-and-test-infrastructure/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/28/the-excellence-uniform-build-and-test-infrastructure/</guid>
        
        
      </item>
    
      <item>
        <title>Controlling the yak stack</title>
        <description>&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A-yak-shaving I will go, a-yak-shaving I will go&amp;#10;I&amp;#39;ll update the CI and then the build&amp;#10;Then implement my feature and push to the source repo&lt;/p&gt;&amp;mdash; Kamal Marhubi (@kamalmarhubi) &lt;a href=&quot;https://twitter.com/kamalmarhubi/status/603663049313132545&quot;&gt;May 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Today, I was trying to make a &lt;a href=&quot;https://github.com/jparyani/pycapnp/issues/66&quot;&gt;small improvement&lt;/a&gt; to
&lt;a href=&quot;https://github.com/jparyani/pycapnp&quot;&gt;pycapnp&lt;/a&gt;, the Python implementation of &lt;a href=&quot;https://capnproto.org/&quot;&gt;Cap’n Proto&lt;/a&gt;. This isn’t
a very big change: it’s mostly adding a few lines at the end of a big
conditional to make the library a better Python citizen.&lt;/p&gt;

&lt;p&gt;But the library has &lt;a href=&quot;https://github.com/jparyani/pycapnp/tree/develop/test&quot;&gt;tests&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/jparyani/pycapnp&quot;&gt;continuous integration&lt;/a&gt; set up.
These are both awesome things to have, except for the part where they
don’t work for me. Here is my current yak stack&lt;sup id=&quot;fnref:yak-stack&quot;&gt;&lt;a href=&quot;#fn:yak-stack&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href=&quot;http://tox.testrun.org/&quot;&gt;tox&lt;/a&gt; tests don’t run properly on Linux, so &lt;a href=&quot;https://github.com/kamalmarhubi/pycapnp/commit/965301e9b42e664d43de5f8ea7f7f69648e0b7da&quot;&gt;I
modified&lt;/a&gt; the &lt;code&gt;tox.ini&lt;/code&gt; to remove a setting I think is
OS X specific, fixing tox on my machine&lt;/li&gt;
  &lt;li&gt;I need to make sure the CI passes, so I fork the repo on GitHub, sign
up for Travis CI, and add my fork to Travis&lt;/li&gt;
  &lt;li&gt;the &lt;a href=&quot;https://travis-ci.org/kamalmarhubi/pycapnp/jobs/64316653&quot;&gt;Travis build fails&lt;/a&gt; because my build is using the new container
based infrastructure, which doesn’t allow setuid programs like &lt;code&gt;sudo&lt;/code&gt;
to run, so I started trying to port the CI build to the new
infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think the third step was where I could have stopped. If I’d tried
finding out how to opt out of the container infrastructure, I might have
been able to move on.&lt;/p&gt;

&lt;p&gt;At least that is a good starting point for tomorrow.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:yak-stack&quot;&gt;
      &lt;p&gt;Remember: yak stacks, like x86 stacks, grow down. &lt;a href=&quot;#fnref:yak-stack&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/</guid>
        
        
      </item>
    
      <item>
        <title>A touch of Plain Bob Minor</title>
        <description>&lt;p&gt;I’m almost as excited about getting to &lt;a href=&quot;https://en.wikipedia.org/wiki/Change_ringing&quot;&gt;ring&lt;/a&gt; all summer in NYC as I
am about being at the Recurse Center. This evening I went to &lt;a href=&quot;https://www.trinitywallstreet.org/&quot;&gt;Trinity Wall
Street&lt;/a&gt;, met some old friends, and rang some bells. I think the last
time I got to ring tower bells was in Toronto last June, which is a little bit
longer than usual.&lt;/p&gt;

&lt;p&gt;There was a relatively low turnout—I think we were just twelve in all,
including a visitor from England. The band was really accommodating of me. I
started off tenoring behind to some plain courses of &lt;a href=&quot;https://en.wikipedia.org/wiki/Grandsire&quot;&gt;Grandsire&lt;/a&gt; triples.
There was lots of overpulling as usual, but &lt;a href=&quot;http://www.bellringing.org/finder/getting-started/9/ropesight/&quot;&gt;ropesight&lt;/a&gt; was intact: I was able
to see the dodging at the back. Later in the evening, I tenored behind a touch,
and I could also see the double dodging when a single was called, which was fun
to notice.&lt;/p&gt;

&lt;p&gt;After the Grandsire, I rang inside for a plain course of &lt;a href=&quot;http://www.ringbell.co.uk/methods/pb6.htm&quot;&gt;Plain Bob
Minor&lt;/a&gt;. I told the ringers I’d rung a quarter peal of minor inside, but
that I think I was mistaken. The imagined quarter didn’t show up in a search on
&lt;a href=&quot;http://campanophile.com/&quot;&gt;Campanophile&lt;/a&gt;. I vaguely remember that it was in fact a failed attempt in
Toronto. In any case, the plain course went pretty smoothly&lt;/p&gt;

&lt;p&gt;And close to the end of the practice, I got to ring a touch! The touch had my
bell skip all the dodging, but I got to make a single which was new for me in
tower. I actually found this slightly easier than the plain course: thanks to
handbells I don’t have too much trouble figuring out what to do at a call, and
there’s something about down-dodges that I’m not happy about in tower.&lt;/p&gt;

&lt;p&gt;All in all, a really excellent first time ringing. Starting off this well, I’m
really excited about making some proper progress this summer!&lt;/p&gt;

</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/27/a-touch-of-plain-bob-minor/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/27/a-touch-of-plain-bob-minor/</guid>
        
        
      </item>
    
      <item>
        <title>Avoiding distractions</title>
        <description>&lt;p&gt;This morning, as part of the Recurse Center’s welcome talks, &lt;a href=&quot;http://maryrosecook.com/&quot;&gt;Mary Rose
Cook&lt;/a&gt; gave some advice on how to spend twelve weeks of unstrucutred time.
You can see similar advice in the Recurse Center  manual’s &lt;a href=&quot;https://www.recurse.com/manual#sec-advice&quot;&gt;advice
section&lt;/a&gt;, where they are divided up by level of experience:
relatively new to programming; already have good grasp of one language; and
really experienced.&lt;/p&gt;

&lt;p&gt;There is one item that appears on all three lists: ‘avoid distractions’.&lt;/p&gt;

&lt;p&gt;Aside from a delightful pairing experience&lt;sup id=&quot;fnref:ann-pairing&quot;&gt;&lt;a href=&quot;#fn:ann-pairing&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; with &lt;a href=&quot;http://www.annharter.com/&quot;&gt;Ann&lt;/a&gt;, my only
technical work today was on the one thing I had decided not to work
on at the Recurse Center.&lt;sup id=&quot;fnref:non-project&quot;&gt;&lt;a href=&quot;#fn:non-project&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; While today was the first day, and it started
later and ended earlier than most days will, I’ll still need to keep a close watch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ann-pairing&quot;&gt;

      &lt;p&gt;I learned some Ruby syntax and we refactored a
guess-the-number-from-0-to-99 game. The absolute best part was where we wanted
to test something about the iteration, but won with 50 on the first try. The
program very accurately told us that we were ‘the best at this!’&lt;/p&gt;
      &lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;🏆 &lt;a href=&quot;http://t.co/PZVQRuX9bH&quot;&gt;pic.twitter.com/PZVQRuX9bH&lt;/a&gt;&lt;/p&gt;&amp;mdash; figuratively dying (@anyharder) &lt;a href=&quot;https://twitter.com/anyharder/status/603273545091817472&quot;&gt;May 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
      &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

      &lt;p&gt;&lt;a href=&quot;#fnref:ann-pairing&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:non-project&quot;&gt;

      &lt;p&gt;On the bright side, I finally got my 3-node &lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;etcd&lt;/a&gt; cluster running etcd2,
which was blocking further progress on that project. &lt;a href=&quot;#fnref:non-project&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 26 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/26/avoiding-distractions/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/26/avoiding-distractions/</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center OMG</title>
        <description>&lt;p&gt;Tomorrow is my first day at the &lt;a href=&quot;!!&quot;&gt;Recurse Center&lt;/a&gt;. I just reread the
&lt;a href=&quot;https://www.recurse.com/manual&quot; title=&quot;The Recurse Center User&#39;s Manual&quot;&gt;manual&lt;/a&gt;, and it made me think a bit about what I’m comfortable
with, what I’m not, and how I’m hoping to use my time at RC.&lt;/p&gt;

&lt;p&gt;The manual lists the &lt;a href=&quot;https://www.recurse.com/manual#sec-principles&quot; title=&quot;Traits of an awesome Recurser&quot;&gt;traits of an awesome Recurser&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;be rigorous&lt;/li&gt;
  &lt;li&gt;strive for greatness&lt;/li&gt;
  &lt;li&gt;reflect on your progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I feel fairly set with the first two. I’m rigorous almost to a fault, and
strive for at least some definition of greatness.This blog post is start on my
reflection on progress, and I’ll keep posting here as the summer progresses. I
want to force myself to put more time into writing down what I’m learning than
I think is reasonable; we’ll see how that turns out!&lt;/p&gt;

&lt;p&gt;From the rest of the user’s manual, I came up with a list of relevant things
make me feel (un)comfortable.&lt;/p&gt;

&lt;p&gt;Comfortable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getting and giving code review, particularly in Python or C++&lt;/li&gt;
  &lt;li&gt;writing code slowly&lt;/li&gt;
  &lt;li&gt;agonizing over details&lt;sup id=&quot;fnref:details&quot;&gt;&lt;a href=&quot;#fn:details&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and being idiomatic in whatever tool or
language (this leads directly to the above)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uncomfortable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pair programming (there is a &lt;a href=&quot;https://www.recurse.com/manual#sec-pairing&quot; title=&quot;Pair programming&quot;&gt;huge section&lt;/a&gt; on pairing in the manual)&lt;/li&gt;
  &lt;li&gt;writing code quickly&lt;/li&gt;
  &lt;li&gt;writing unidiomatic code that works now&lt;/li&gt;
  &lt;li&gt;pair programming&lt;/li&gt;
  &lt;li&gt;also, pair programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ‘uncomfortable’ list is particularly telling, and points to where I should
focus on the not-entirely-technical side of things. I’ll definitely be
reflecting on progress there throughout the summer, along with many other
areas.&lt;/p&gt;

&lt;p&gt;And now to sleep!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:details&quot;&gt;

      &lt;p&gt;eg, I spent a non-zero amount of time thinking about: whether to spell it
‘Center’ or ‘Centre’; how many times to include pair programming in the
‘uncomfortable list’; and what symbol set to use for footnotes: numbers or  *,
†, ‡, §, …—I eventually settled on using the built-in &lt;a href=&quot;http://kramdown.gettalong.org/syntax.html#footnotes&quot;&gt;footnote
feature&lt;/a&gt; of the &lt;a href=&quot;http://kramdown.gettalong.org/&quot;&gt;kramdown&lt;/a&gt; Markdown processor used by
Jekyll &lt;a href=&quot;#fnref:details&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/25/recurse-center-omg/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/25/recurse-center-omg/</guid>
        
        
      </item>
    
  </channel>
</rss>
