<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kamal Marhubi</title>
    <description></description>
    <link>http://kamalmarhubi.com/</link>
    <atom:link href="http://kamalmarhubi.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 Jun 2015 03:05:44 -0400</pubDate>
    <lastBuildDate>Fri, 12 Jun 2015 03:05:44 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>ifconfig: how does it even?</title>
        <description>&lt;p&gt;I can already &lt;a href=&quot;/blog/2015/06/10/some-early-linux-ipc-latency-data/&quot;&gt;measure the latency&lt;/a&gt; of TCP sockets over the
loopback interface. I want to compare this to TCP sockets connecting to one of
the ‘real’ addresses the machine has, to see if it’s any different. I could see
this being either the same as the loopback interface, or being slower. I’m way
below the level I have any real knowledge of at this point, so there’s only one
way to find out.&lt;/p&gt;

&lt;p&gt;But rather than hardcode in the IP addresses, or take them on the command line,
I want the benchmark to find them itself. One thing I want out of these
benchmarks is for them to build on any Linux system, and run without needing
machine-specific arguments.  When &lt;em&gt;I&lt;/em&gt; find out what IP addresses my machine
has, I use &lt;code&gt;ifconfig&lt;/code&gt;. But how does &lt;code&gt;ifconfig&lt;/code&gt; do it? I was about to Google the
answer when I realised this would be a perfect time use &lt;code&gt;strace&lt;/code&gt;, and so I did!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I just straced ifconfig to find out how it finds out which interfaces exist! /cc &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;@b0rk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kamal Marhubi (@kamalmarhubi) &lt;a href=&quot;https://twitter.com/kamalmarhubi/status/608735834905415680&quot;&gt;June 10, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here’s the quick summary of what happens:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create sockets of both &lt;code&gt;AF_INET&lt;/code&gt; and &lt;code&gt;AF_INET6&lt;/code&gt; families&lt;/li&gt;
  &lt;li&gt;read &lt;code&gt;/proc/net/dev&lt;/code&gt; to get a complete list of interfaces; we’ll need this
to get the addresses for &lt;code&gt;AF_INET6&lt;/code&gt; socket, as well as to get the list of
interfaces that don’t have an &lt;code&gt;AF_INET&lt;/code&gt; address&lt;/li&gt;
  &lt;li&gt;use the &lt;code&gt;SIOCGIFCONF&lt;/code&gt; &lt;code&gt;ioctl&lt;/code&gt; to get a list of addresses for &lt;code&gt;AF_INET&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;loop through the interface names that came from &lt;code&gt;/proc/net/dev&lt;/code&gt; and for each
one
    &lt;ul&gt;
      &lt;li&gt;read &lt;code&gt;/proc/net/if_inet6&lt;/code&gt; to get the IPv6 address for the interface, if
any&lt;/li&gt;
      &lt;li&gt;use a series of &lt;code&gt;ioctl&lt;/code&gt; calls to get data about the interface&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To see in more detail, take a look at &lt;a href=&quot;https://gist.github.com/kamalmarhubi/1dfc1fa302916e21975d&quot;&gt;this gist&lt;/a&gt; for an annotated
&lt;code&gt;strace&lt;/code&gt; of &lt;code&gt;ifconfig&lt;/code&gt; and &lt;code&gt;ifconfig -s&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/11/ifconfig-how-does-it-even/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/11/ifconfig-how-does-it-even/</guid>
        
        
      </item>
    
      <item>
        <title>Some early Linux IPC latency data</title>
        <description>&lt;p&gt;I’ve &lt;a href=&quot;https://github.com/kamalmarhubi/linux-ipc-benchmarks/commit/e06c93b54b4d13e1f78c64add9ac8a5cdf19b9ff&quot;&gt;added&lt;/a&gt; &lt;a href=&quot;https://github.com/kamalmarhubi/linux-ipc-benchmarks/commit/8f9094522465db54003f08da4d5b797e2944f47e&quot;&gt;benchmarks&lt;/a&gt; for UNIX domain
sockets and TCP sockets over the loopback interface. UNIX domain sockets were
super easy to implement thanks to the handy &lt;a href=&quot;http://man7.org/linux/man-pages/man2/socketpair.2.html&quot;&gt;&lt;code&gt;socketpair&lt;/code&gt;&lt;/a&gt;
function. It was not really any different from pipes. The difference is that
since sockets are full duplex, you only need to create one pair.  If the
processes were unrelated, or if I wanted to be able to accept multiple
connections, it would be much more like TCP sockets—ie, a pain!&lt;/p&gt;

&lt;p&gt;I say a pain because, in doing this, I ‘found out’ that, despite having written
a non-zero number of server applications, I’ve never done socket programming
before. This wasn’t exactly a surprise, but it was definitely interesting to
realise how little I knew about how to go about it. Luckily, man pages! (And
&lt;a href=&quot;http://www.apuebook.com/index.html&quot;&gt;Advanced Programming in the UNIX Environment&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Here’s the quick tl;dr for TCP over IPv4::&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to listen for incoming connections:
    &lt;ol&gt;
      &lt;li&gt;create a socket with &lt;code&gt;socket(AF_INET, SOCK_STREAM, 0 /* default protocol */)&lt;/code&gt;.&lt;sup id=&quot;fnref:default-proto&quot;&gt;&lt;a href=&quot;#fn:default-proto&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
      &lt;li&gt;bind it to a port with &lt;code&gt;bind(sockfd, addr, addrlen)&lt;/code&gt; where &lt;code&gt;addr&lt;/code&gt; is a
struct that specifies the address to bind to. For &lt;code&gt;AF_INET&lt;/code&gt;, this means
the IP and port. In my case, I used &lt;code&gt;INETADDR_LOOPBACK&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; to listen
on some available port on &lt;code&gt;127.0.0.1&lt;/code&gt;.&lt;sup id=&quot;fnref:htonl&quot;&gt;&lt;a href=&quot;#fn:htonl&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
      &lt;li&gt;start listening on the socket with &lt;code&gt;listen(sockfd, 1 /* backlog */)&lt;/code&gt;. I
used a &lt;code&gt;backlog&lt;/code&gt; of 1 because I only expect a single incoming connection.&lt;/li&gt;
      &lt;li&gt;finally, call &lt;code&gt;accept(sockfd, NULL /* addr */, NULL /* addrlen */)&lt;/code&gt; to
block until a connection comes in, which returns a new file descriptor to
talk to the connecting process. I pass in &lt;code&gt;NULL&lt;/code&gt; for the &lt;code&gt;addr&lt;/code&gt; because I
don’t care who’s talking to me!&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;to connect to another process that’s listening:
    &lt;ol&gt;
      &lt;li&gt;create a socket with &lt;code&gt;socket(AF_INET, SOCK_STREAM, 0 /* default protocol */)&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;connect to the remote process with &lt;code&gt;connect(sockfd, addr, addrlen)&lt;/code&gt;. The
&lt;code&gt;addr&lt;/code&gt; specifies the address to connect to; again for &lt;code&gt;AF_INET&lt;/code&gt; this means
the IP and port.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This brings me up to having programs to test latency for four IPC mechanisms:
- pipes
- eventfd
- UNIX domain sockets
- TCP sockets over the loopback interface&lt;/p&gt;

&lt;p&gt;Here is some early latency data from my machine, with emphasis on the tail latencies:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;50&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;75&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;90&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99.9&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99.99&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99.999&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pipes&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4255&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4960&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5208&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5352&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7814&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16214&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31290&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;eventfd&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4353&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4443&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4760&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5053&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9445&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14573&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;68528&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;af_unix&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1439&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1621&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1655&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1898&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2681&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11512&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;54714&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;af_inet_loopback&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7287&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7412&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7857&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8573&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17412&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20515&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;37019&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Units are nanoseconds. Time is measured using &lt;code&gt;clock_gettime&lt;/code&gt; with
&lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt;. The quantiles are for a million measurements; in all cases,
the binary was run with flags &lt;code&gt;--warmup-iters=10000 --iters=1 --repeat=1000000&lt;/code&gt;
(see below).&lt;/p&gt;

&lt;p&gt;For me, the biggest surprise was how much faster UNIX domain sockets were than
anything else, and in particular, how much faster they are than eventfd. Or
that they are faster at all. The &lt;code&gt;read&lt;/code&gt; call in each case blocks until a
corresponding &lt;code&gt;write&lt;/code&gt;. I would have thought eventfd had the minimal amount of
extra work beyond that, since all it does is read and modify a &lt;code&gt;uint64_t&lt;/code&gt;. In
fairness, each of the other programs are writing a single byte at present, but
I doubt the difference will be so drastic.&lt;/p&gt;

&lt;p&gt;Another fun thing is to see difference in `latency when pinning the two
processes to specific CPUs. My machine has a dual core processor, where each
processor has 2 hardware threads. Here’s a quick look at latencies for pipes
with different CPU affinities:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Percentile&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;50&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;75&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;90&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99.9&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99.99&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;99.999&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;default&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4255&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4960&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5208&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5352&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7814&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16214&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31290&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;same CPU&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2386&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2402&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2564&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3134&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12255&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15126&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28225&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;same core&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4232&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4270&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4395&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4788&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14408&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17101&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;39052&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;different core&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5043&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5101&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5170&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5772&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11894&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;38726&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;398796&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I was expecting a difference between different cores and not, since it requires
a trip through the L3 cache. I have no realy idea of what difference I was
expecting, but a microsecond could make sense if multiple locations needed to
be accessed. This stuff is beyond my ken, so I’m just guessing.&lt;/p&gt;

&lt;p&gt;What I was &lt;em&gt;not&lt;/em&gt; expecting, was a dramatic difference between ‘same CPU’ and
‘same core’. The CPUs are hardware threads on a single core. I can’t think of
any reason there would be such a difference. I do want to check that it’s not
due to scheduling weirdness, so I’ll probably boot up in single user mode at
some point to give it another go.&lt;/p&gt;

&lt;p&gt;If you want to run these on your own system, clone the &lt;a href=&quot;https://github.com/kamalmarhubi/linux-ipc-benchmarks&quot;&gt;repo&lt;/a&gt; and run &lt;code&gt;make&lt;/code&gt;.
There will be four binaries produced, one for each of the mechanisms.  They all
take the same command line flags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  -c, --child-cpu=CPUID      CPU to run the child on; default is to let the
                             scheduler do as it will
  -i, -n, --iters=COUNT      number of iterations to measure; default: 100000
  -p, --parent-cpu=CPUID     CPU to run the parent on; default is to let the
                             scheduler do as it will
  -r, --repeat=COUNT         number of times to repeat measurement; default: 1
  -w, --warmup-iters=COUNT   number of iterations before measurement; default:
                             1000
  -?, --help                 Give this help list
      --usage                Give a short usage message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:default-proto&quot;&gt;

      &lt;p&gt;The default protocol for &lt;code&gt;SOCK_STREAM&lt;/code&gt; for the &lt;code&gt;AF_INET&lt;/code&gt;
socket family is TCP. &lt;a href=&quot;#fnref:default-proto&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:htonl&quot;&gt;

      &lt;p&gt;A fun little thing to be aware of is that the &lt;code&gt;addr&lt;/code&gt; must contain the IP
address in network byte order. This necessitates converting the IP address
and port using &lt;code&gt;htonl&lt;/code&gt; and &lt;code&gt;htons&lt;/code&gt;, respectively, to convert the IP from
&lt;em&gt;h_ost _to&lt;/em&gt; _n_etwork byte order (the &lt;code&gt;l&lt;/code&gt; stands for &lt;code&gt;long&lt;/code&gt;, which in this
case means a &lt;code&gt;uint32_t&lt;/code&gt; because &lt;code&gt;long&lt;/code&gt;s used to be shorter; the &lt;code&gt;s&lt;/code&gt; stands
for &lt;code&gt;short&lt;/code&gt; which have stayed short at 16 bits long). &lt;a href=&quot;#fnref:htonl&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 10 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/10/some-early-linux-ipc-latency-data/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/10/some-early-linux-ipc-latency-data/</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes: 2015-06-08</title>
        <description>&lt;h1 id=&quot;linux-ipc-stuff&quot;&gt;Linux IPC stuff&lt;/h1&gt;
&lt;p&gt;I’m getting closer to having some data on latencies for pipes and eventfds. I
reworked the little programs to easily dump timings for multiple runs. Next
step is to figure out how to visualise it. Likely I’ll use iPython Notebook and
Pandas.&lt;/p&gt;

&lt;p&gt;On the way, I found out a thing—one of those obvious-in-retrospect things. Both
the pipes and eventfd programs I wrote have the same structure. They start a
child process that acts as a server that responds as soon as it receives a
message. The child just runs a loop like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;for (;;) {
  char msg;
  read(rx_fd, &amp;amp;msg, 1);
  write(tx_fd, &quot;1&quot;, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I implemented this for pipes first, and this works great. A &lt;code&gt;read&lt;/code&gt; on a pipe
whose write end is closed will return 0 to signal end of file. A &lt;code&gt;write&lt;/code&gt; on a
pipe whose read end is closed results in a &lt;code&gt;SIGPIPE&lt;/code&gt; signal. The result is that
once the parent closes its pipes—whether explicitly or on exit—the child will
die because the default action for &lt;code&gt;SIGPIPE&lt;/code&gt; is to terminate the process.&lt;/p&gt;

&lt;p&gt;With eventfds, there is no analogous signal. It would actually be a bit odd.
Pipes have two ends, and each gets its own file descriptor. When the last file
descriptor referring to one of the ends is closed, then the &lt;code&gt;EOF&lt;/code&gt; / &lt;code&gt;SIGPIPE&lt;/code&gt;
behaviour kicks in. To get something similar to happen with eventfds, the
special behaviour would have to kick in when only one file descriptor
references the eventfd object. But right after the call to &lt;code&gt;eventfd&lt;/code&gt;, there is
just one file descriptor referencing it. I suppose it could be special cased to
trigger when the number of open file descriptors goes &lt;em&gt;down&lt;/em&gt; to one, but it’s
also completely reasonable that it wouldn’t.&lt;/p&gt;

&lt;p&gt;All that is to say, the child doesn’t terminate when the parent does, and I ended up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pgrep eventfd | head
6123
6131
6138
6145
6153
6160
6531
6538
6545
6553
$ pgrep eventfd | wc -l
172
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s a lot of zombies! Don’t worry, I killed them. With FIRE^W &lt;code&gt;pkill&lt;/code&gt;. I
still have to fix the problem, but the solution is pretty easy: kill the child
before the parent exits.&lt;/p&gt;

&lt;h1 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h1&gt;
&lt;p&gt;The internet went down for a bit at RC today. I used the time to add an index
page to this blog, &lt;a href=&quot;https://twitter.com/kamalmarhubi/status/607967764620431361&quot;&gt;making some people happy&lt;/a&gt;. It felt silly to
use lack of internet to make internet, but there you go.&lt;/p&gt;

&lt;p&gt;During the internet outage, I also brainstormed with &lt;a href=&quot;https://twitter.com/SimplyAhmaz1ng&quot;&gt;Ahmed&lt;/a&gt; a bit on grammar
ideas for his Arabic programming language. I was thinking it would be cool to
integrate some Arabic grammar into the language. For example, use the
possessive for property access, and allow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_grammar#Enclitic_pronouns&quot;&gt;attached pronouns&lt;/a&gt; to
be a default argument like Perl’s &lt;code&gt;$_&lt;/code&gt;. We decided they wouldn’t be a great
idea because it could end up in a sort of uncanny valley where something it
looks like should work but it doesn’t.&lt;/p&gt;

&lt;p&gt;I paired with &lt;a href=&quot;https://twitter.com/optimistsinc&quot;&gt;Jess&lt;/a&gt; who is learning Haskell to do some lattice-based
cryptography stuff. But step 1 is tic-tac-toe. We did some refactoring, and I
pointed out a couple of useful things like using &lt;code&gt;@&lt;/code&gt; in a pattern to name the
whole match. Somehow I’m pretty happy helping people with Haskell, even though
I’m not really that interested in it anymore myself. Maybe it’s just because
it’s something I know and so can help with.&lt;/p&gt;

&lt;p&gt;Allison Parish is a resident for the next two weeks. She gave a talk in the
evening on &lt;a href=&quot;http://www.decontextualize.com/projects/nite/&quot;&gt;new interfaces for textual expression&lt;/a&gt;. Do take a look at
that link, her projects are really cool! She’s aiming to put together a bunch
of prototypes while at RC, and I’m really excited to see what she gets up to.&lt;/p&gt;

&lt;h1 id=&quot;random&quot;&gt;Random&lt;/h1&gt;

&lt;p&gt;On the way to eBay for Allison’s talk, I stopped by Union Square to buy an
apple. I also got a ‘cocktail’ of apple juices for free—I stopped to look at a
stall that was packing up, and their demo bottles were mostly empty.  The
person poured them into one bottle and just gave it to me.&lt;/p&gt;

&lt;p&gt;I then took my apple and juice to a table on Broadway and sat down. Two people
next to me were eating burgers and speaking Québecois French. I wasn’t going to
insert myself until I heard ‘Rachel et Saint-Hubert’, which is an intersection
close to where I live. They were discussing the burger, and so I asked (in
French) if they were talking about L’Anecdote, a burger place at that corner. I
think this was a fun surprise for them, and we had a little chat about what
brought us to New York. Even more fun, I was wearing my ‘&lt;a href=&quot;https://en.wikipedia.org/wiki/Five_Roses_Flour&quot;&gt;Farine Five
Roses&lt;/a&gt;’ t-shirt, marking me—in one of their words—as &lt;em&gt;vrai
Montréalais&lt;/em&gt;!&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/08/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/08/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes: 2015-06-03–2015-06-07</title>
        <description>&lt;p&gt;I had a busy week with my parents visiting. I was leaving RC a bit earlier than
I would have otherwise, and also getting to bed later—they were staying in
midtown, and I’m in Flatbush. As a result, I let my posting slide a bit, and
this is me catching up. I’ll also plan to write lab notes such as these each
normal RC day, ie Monday through Thursday.&lt;/p&gt;

&lt;h1 id=&quot;linux-ipc&quot;&gt;Linux IPC&lt;/h1&gt;
&lt;p&gt;Ostensibly, the main project I’m working on right now is investigating Linux
IPC. The eventual plan is to try and implement a share memory transport for
&lt;a href=&quot;http://capnproto.org/&quot;&gt;Cap’n Proto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a start, I implemented a couple of small programs to measure latency for
&lt;a href=&quot;http://man7.org/linux/man-pages/man2/pipe.2.html&quot;&gt;pipes&lt;/a&gt; and &lt;a href=&quot;http://man7.org/linux/man-pages/man2/eventfd.2.html&quot;&gt;eventfd&lt;/a&gt;. It looks like the round trip time on my machine is on
the order of a couple of microseconds. It varies a little depending on if I pin
the communicating processes to the same core or not. This was nice to see,
since it would require going over the L3 cache. However, the difference was on
the order of a couple of hundred nanoseconds, which is more than I expected.
I’ll aim to get some data and draw some histograms early this coming week.&lt;/p&gt;

&lt;h1 id=&quot;javascript-distraction&quot;&gt;JavaScript distraction&lt;/h1&gt;
&lt;p&gt;Somehow I ended up with a bunch of JavaScript related tabs open. I think I
blame Monica for it, as I was catching up on Twitter and saw her post about
&lt;a href=&quot;http://polymer-project.org/&quot;&gt;Polymer&lt;/a&gt; 1.0:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;🎉🚀&lt;a href=&quot;https://twitter.com/polymer&quot;&gt;@polymer&lt;/a&gt; turns 1! SO excited to be part of this release — everything is faster and  the elements are shinier! 👏❤️&amp;#10;&amp;#10;&lt;a href=&quot;http://t.co/fSzBi1s8bD&quot;&gt;http://t.co/fSzBi1s8bD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Monica Dinosaurescu (@notwaldorf) &lt;a href=&quot;https://twitter.com/notwaldorf/status/604324257460453376&quot;&gt;May 29, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Eventually (or maybe soon?) I want to start learning JS. Or ECMAScript 2015 to
be more specific. Or maybe even some ES7 features, like &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;. I
was planning to learn React for some nifty front-end isomorphic buzzword
compliance, but I’m not sure now. Maybe Polymer? Maybe some other &lt;a href=&quot;http://vdom-benchmark.github.io/vdom-benchmark/&quot;&gt;virtual DOM
thingamy&lt;/a&gt; thing?&lt;/p&gt;

&lt;h1 id=&quot;make-distraction&quot;&gt;make distraction&lt;/h1&gt;

&lt;p&gt;I did a &lt;a href=&quot;https://github.com/kamalmarhubi/linux-ipc-benchmarks/commit/20cdb2e254a02de85180c1d4708ecfb7faa9812e&quot;&gt;refactor&lt;/a&gt; of my IPC programs to allow them to share a &lt;code&gt;main&lt;/code&gt; that
handled command line arguments and other stuff. This required me to rejigger
the &lt;code&gt;Makefile&lt;/code&gt; to have both programs depend on the new source file, and to link
it in. I asked Twitter the wrong question:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;is actually learning make a worthwhile pursuit?&lt;/p&gt;&amp;mdash; Kamal Marhubi (@kamalmarhubi) &lt;a href=&quot;https://twitter.com/kamalmarhubi/status/607295232821075969&quot;&gt;June 6, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The responses lead me to expend small but non-zero time on this. I learned that
&lt;code&gt;$@&lt;/code&gt;’ and &lt;code&gt;$&amp;lt;&lt;/code&gt; are &lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables&quot;&gt;meaningful variable names&lt;/a&gt;. Also that it’s
possible to build a static site generator driven by &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/kamalmarhubi&quot;&gt;@kamalmarhubi&lt;/a&gt; I love make! It saved my life so many times. I&amp;#39;m writing a static site generator in a Makefile.&lt;/p&gt;&amp;mdash; linse   (@linse) &lt;a href=&quot;https://twitter.com/linse/status/607315482107117568&quot;&gt;June 6, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sun, 07 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/07/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/07/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Goals, non-goals, and anti-goals</title>
        <description>&lt;p&gt;When working on a thing—being at the Recurse Center, say—knowing what you want
to get out of it helps with direction. Identifying clear goals keeps your
focused. For example, I know that I want to know more about &lt;a href=&quot;http://kamalmarhubi.com/blog/2015/06/01/a-list-of-linux-ipc-mechanisms/&quot;&gt;inter-process
communication in Linux&lt;/a&gt;. I also want to be able to develop for the
browser, which means learning JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;Knowing what some non-goals are can also help. For me, exploring new
programming languages is a non-goal, as I’ve done enough of it in the past.
Making that explicit simplifies turning down a good chunk of activities at the
Recurse Center that would otherwise distract me from my goals.&lt;/p&gt;

&lt;p&gt;But there’s another category: anti-goals. These are things I specifically do
not want to work onspend time on while at the Recurse Center. I’ve identified a
couple of these so far: installing &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; on my &lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt; cluster, and tinkering with
Google’s &lt;a href=&quot;http://bazel.io/&quot;&gt;Bazel&lt;/a&gt; build system.&lt;/p&gt;

&lt;p&gt;The distinction between non-goals and anti-goals is a bit unclear to me. In the
context of self-directed learning, I have identified a couple of potential
criteria. One is that a non-goal is still educational and could be useful,
while an anti-goal is more like busywork and configuration; the other is that
anti-goals are more tempting to work on. This makes them more likely to
interfere with my goals by drawing me away.&lt;/p&gt;

&lt;p&gt;Putting this helps clarify why I had such an unsatisfying first week. I started
off with working on a small patch to someone else’s project. It seemed simple
enough, but it turned out to need some &lt;a href=&quot;http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/&quot;&gt;fussing with build and testing
configuration&lt;/a&gt;. This put most of the time I spent closer to anti-goals
than to goals. Realising this after lunch today, I decided to simply dump that
patch—however close to done it seems—and move on to exploring IPC.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Thanks to Danielle Sucher, David Albert, and Olivia Jackson for conversations
that set me on the way to this categorisation. I feel like my next few days
will be better than my last few for it!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/02/goals-non-goals-and-anti-goals/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/02/goals-non-goals-and-anti-goals/</guid>
        
        
      </item>
    
      <item>
        <title>A list of Linux IPC mechanisms</title>
        <description>&lt;p&gt;Here is a list of Linux inter-process communication mechanisms that I know of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pipes&lt;/li&gt;
  &lt;li&gt;FIFOs&lt;/li&gt;
  &lt;li&gt;POSIX IPC (semaphores, message queues, shared memory)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;memfd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;UNIX domain sockets&lt;/li&gt;
  &lt;li&gt;TCP/UDP sockets on loopback interface&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;eventfd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;splice&lt;/code&gt; and friends&lt;/li&gt;
  &lt;li&gt;signals&lt;/li&gt;
  &lt;li&gt;the filesystem, including &lt;code&gt;mmap&lt;/code&gt;‘ed files&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;process_vm_readv&lt;/code&gt; and &lt;code&gt;process_vm_writev&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ptrace&lt;/code&gt; with &lt;code&gt;PTRACE_PEEK{TEXT,DATA,USER}&lt;/code&gt; and &lt;code&gt;PTRACE_POKE{TEXT,DATA,USER}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll link or explain them a bit better soon, but for now I just want to collect them. If you know of any I’m missing, please &lt;a href=&quot;https://twitter.com/kamalmarhubi&quot;&gt;tweet&lt;/a&gt; or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#107;&amp;#097;&amp;#109;&amp;#097;&amp;#108;&amp;#064;&amp;#109;&amp;#097;&amp;#114;&amp;#104;&amp;#117;&amp;#098;&amp;#105;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;email&lt;/a&gt; me!&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/01/a-list-of-linux-ipc-mechanisms/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/01/a-list-of-linux-ipc-mechanisms/</guid>
        
        
      </item>
    
      <item>
        <title>The excellence of uniform build and test infrastructure</title>
        <description>&lt;p&gt;I made some small amount of progress on &lt;a href=&quot;http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/&quot;&gt;yesterday’s yaks&lt;/a&gt;. I have
almost got to the point where think that the tests work on both OS X
and Linux; I just need to get some time on a Mac to be sure.&lt;/p&gt;

&lt;p&gt;The experience so far has made me realise how powerful it is to have
uniform build and test infrastructure. At Google, an improvement as
small as I’m making would take not much longer than it takes to write
the code. Everything is in &lt;a href=&quot;http://danluu.com/monorepo/&quot;&gt;one reository&lt;/a&gt;, and all tests are
run with the same &lt;a href=&quot;http://bazel.io/&quot;&gt;tool&lt;/a&gt;. As a result, you simply make your
change, run the tests, and then send it for review.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/jparyani/pycapnp&quot;&gt;project&lt;/a&gt; I’m changing has a test suite. For local testing,
you run either &lt;code&gt;py.test&lt;/code&gt; to run with the current Python environment, or
&lt;code&gt;tox&lt;/code&gt; to run a &lt;a href=&quot;https://github.com/jparyani/pycapnp/blob/790bdce72ab3f2b6c203f00eaf07e6d605aa631a/tox.ini#L2&quot;&gt;collection of environments&lt;/a&gt;. In the CI build,
the tests are run with &lt;code&gt;py.test&lt;/code&gt; under a &lt;a href=&quot;https://github.com/jparyani/pycapnp/blob/790bdce72ab3f2b6c203f00eaf07e6d605aa631a/.travis.yml#L6-11&quot;&gt;set of environments&lt;/a&gt; which defined by Travis CI’s infrastructure.&lt;/p&gt;

&lt;p&gt;This difference between local tests and tests under CI is quite
frustrating, especially given that the CI runs take many minutes to get
scheduled and run. I can get to the Works On My Machine™ state, but have
the CI build fail because the environment is different. To say I spent
most of yesterday and today refreshing CI build pages wouldn’t be too
inaccurate!&lt;/p&gt;

&lt;p&gt;Even more, Travis CI recently changed its default from virtualized
infrastructure to containerized infrastructure. The differences seem to
be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;containerized infrastructure schedules and runs quicker&lt;/li&gt;
  &lt;li&gt;containerized infrastructure won’t run setuid programs such as
sudo, which is used in this project’s &lt;a href=&quot;https://github.com/jparyani/pycapnp/blob/aa7d5303193b13880728035c298c635e4fdcbe1c/buildutils/setup_travis.sh#L7-11&quot;&gt;environment set up&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, they only applied this new default to repositories created
after some &lt;a href=&quot;https://github.com/travis-ci/travis-core/blob/7a360299c19011cbd3c0f2bf099a16600048e210/lib/travis/model/job/queue.rb#L88&quot;&gt;cutoff date&lt;/a&gt;.&lt;sup id=&quot;fnref:sudo-detection&quot;&gt;&lt;a href=&quot;#fn:sudo-detection&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; This meant that the
exact same commit that &lt;a href=&quot;https://travis-ci.org/jparyani/pycapnp/builds/61183652&quot;&gt;passes&lt;/a&gt; in the upstream CI build &lt;a href=&quot;https://travis-ci.org/kamalmarhubi/pycapnp/builds/64316652&quot;&gt;would
fail&lt;/a&gt; in a new clone.&lt;sup id=&quot;fnref:refactor&quot;&gt;&lt;a href=&quot;#fn:refactor&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Certainly not intuitive!&lt;/p&gt;

&lt;p&gt;I’m really interested to see how different projects approach this
problem. Having such a uniform infrastructure is a luxury that not many
can afford!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sudo-detection&quot;&gt;

      &lt;p&gt;The attentive reader may wonder about the &lt;code&gt;sudo_detected&lt;/code&gt; method
call there: shouldn’t that have prevented this from being a
problem?  Sadly, it looks as though this detection simply looks at
invocations directly specified in &lt;code&gt;.travis.yml&lt;/code&gt;, and makes no
attempt to find indirect invocations. &lt;a href=&quot;#fnref:sudo-detection&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:refactor&quot;&gt;

      &lt;p&gt;I’m not even going into how at Google, all projects would
have been tested with and without the new configuration. It would
then be &lt;a href=&quot;http://danluu.com/monorepo/#cross-project-changes&quot;&gt;fairly easy&lt;/a&gt; to send an automated change
&lt;a href=&quot;https://github.com/jparyani/pycapnp/commit/790bdce72ab3f2b6c203f00eaf07e6d605aa631a&quot;&gt;updating the configuration&lt;/a&gt; to any project that was
newly failing with the new CI configuration. &lt;a href=&quot;#fnref:refactor&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 28 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/28/the-excellence-uniform-build-and-test-infrastructure/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/28/the-excellence-uniform-build-and-test-infrastructure/</guid>
        
        
      </item>
    
      <item>
        <title>Controlling the yak stack</title>
        <description>&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A-yak-shaving I will go, a-yak-shaving I will go&amp;#10;I&amp;#39;ll update the CI and then the build&amp;#10;Then implement my feature and push to the source repo&lt;/p&gt;&amp;mdash; Kamal Marhubi (@kamalmarhubi) &lt;a href=&quot;https://twitter.com/kamalmarhubi/status/603663049313132545&quot;&gt;May 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Today, I was trying to make a &lt;a href=&quot;https://github.com/jparyani/pycapnp/issues/66&quot;&gt;small improvement&lt;/a&gt; to
&lt;a href=&quot;https://github.com/jparyani/pycapnp&quot;&gt;pycapnp&lt;/a&gt;, the Python implementation of &lt;a href=&quot;https://capnproto.org/&quot;&gt;Cap’n Proto&lt;/a&gt;. This isn’t
a very big change: it’s mostly adding a few lines at the end of a big
conditional to make the library a better Python citizen.&lt;/p&gt;

&lt;p&gt;But the library has &lt;a href=&quot;https://github.com/jparyani/pycapnp/tree/develop/test&quot;&gt;tests&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/jparyani/pycapnp&quot;&gt;continuous integration&lt;/a&gt; set up.
These are both awesome things to have, except for the part where they
don’t work for me. Here is my current yak stack&lt;sup id=&quot;fnref:yak-stack&quot;&gt;&lt;a href=&quot;#fn:yak-stack&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href=&quot;http://tox.testrun.org/&quot;&gt;tox&lt;/a&gt; tests don’t run properly on Linux, so &lt;a href=&quot;https://github.com/kamalmarhubi/pycapnp/commit/965301e9b42e664d43de5f8ea7f7f69648e0b7da&quot;&gt;I
modified&lt;/a&gt; the &lt;code&gt;tox.ini&lt;/code&gt; to remove a setting I think is
OS X specific, fixing tox on my machine&lt;/li&gt;
  &lt;li&gt;I need to make sure the CI passes, so I fork the repo on GitHub, sign
up for Travis CI, and add my fork to Travis&lt;/li&gt;
  &lt;li&gt;the &lt;a href=&quot;https://travis-ci.org/kamalmarhubi/pycapnp/jobs/64316653&quot;&gt;Travis build fails&lt;/a&gt; because my build is using the new container
based infrastructure, which doesn’t allow setuid programs like &lt;code&gt;sudo&lt;/code&gt;
to run, so I started trying to port the CI build to the new
infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think the third step was where I could have stopped. If I’d tried
finding out how to opt out of the container infrastructure, I might have
been able to move on.&lt;/p&gt;

&lt;p&gt;At least that is a good starting point for tomorrow.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:yak-stack&quot;&gt;
      &lt;p&gt;Remember: yak stacks, like x86 stacks, grow down. &lt;a href=&quot;#fnref:yak-stack&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/27/controlling-the-yak-stack/</guid>
        
        
      </item>
    
      <item>
        <title>A touch of Plain Bob Minor</title>
        <description>&lt;p&gt;I’m almost as excited about getting to &lt;a href=&quot;https://en.wikipedia.org/wiki/Change_ringing&quot;&gt;ring&lt;/a&gt; all summer in NYC as I
am about being at the Recurse Center. This evening I went to &lt;a href=&quot;https://www.trinitywallstreet.org/&quot;&gt;Trinity Wall
Street&lt;/a&gt;, met some old friends, and rang some bells. I think the last
time I got to ring tower bells was in Toronto last June, which is a little bit
longer than usual.&lt;/p&gt;

&lt;p&gt;There was a relatively low turnout—I think we were just twelve in all,
including a visitor from England. The band was really accommodating of me. I
started off tenoring behind to some plain courses of &lt;a href=&quot;https://en.wikipedia.org/wiki/Grandsire&quot;&gt;Grandsire&lt;/a&gt; triples.
There was lots of overpulling as usual, but &lt;a href=&quot;http://www.bellringing.org/finder/getting-started/9/ropesight/&quot;&gt;ropesight&lt;/a&gt; was intact: I was able
to see the dodging at the back. Later in the evening, I tenored behind a touch,
and I could also see the double dodging when a single was called, which was fun
to notice.&lt;/p&gt;

&lt;p&gt;After the Grandsire, I rang inside for a plain course of &lt;a href=&quot;http://www.ringbell.co.uk/methods/pb6.htm&quot;&gt;Plain Bob
Minor&lt;/a&gt;. I told the ringers I’d rung a quarter peal of minor inside, but
that I think I was mistaken. The imagined quarter didn’t show up in a search on
&lt;a href=&quot;http://campanophile.com/&quot;&gt;Campanophile&lt;/a&gt;. I vaguely remember that it was in fact a failed attempt in
Toronto. In any case, the plain course went pretty smoothly&lt;/p&gt;

&lt;p&gt;And close to the end of the practice, I got to ring a touch! The touch had my
bell skip all the dodging, but I got to make a single which was new for me in
tower. I actually found this slightly easier than the plain course: thanks to
handbells I don’t have too much trouble figuring out what to do at a call, and
there’s something about down-dodges that I’m not happy about in tower.&lt;/p&gt;

&lt;p&gt;All in all, a really excellent first time ringing. Starting off this well, I’m
really excited about making some proper progress this summer!&lt;/p&gt;

</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/27/a-touch-of-plain-bob-minor/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/27/a-touch-of-plain-bob-minor/</guid>
        
        
      </item>
    
      <item>
        <title>Avoiding distractions</title>
        <description>&lt;p&gt;This morning, as part of the Recurse Center’s welcome talks, &lt;a href=&quot;http://maryrosecook.com/&quot;&gt;Mary Rose
Cook&lt;/a&gt; gave some advice on how to spend twelve weeks of unstrucutred time.
You can see similar advice in the Recurse Center  manual’s &lt;a href=&quot;https://www.recurse.com/manual#sec-advice&quot;&gt;advice
section&lt;/a&gt;, where they are divided up by level of experience:
relatively new to programming; already have good grasp of one language; and
really experienced.&lt;/p&gt;

&lt;p&gt;There is one item that appears on all three lists: ‘avoid distractions’.&lt;/p&gt;

&lt;p&gt;Aside from a delightful pairing experience&lt;sup id=&quot;fnref:ann-pairing&quot;&gt;&lt;a href=&quot;#fn:ann-pairing&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; with &lt;a href=&quot;http://www.annharter.com/&quot;&gt;Ann&lt;/a&gt;, my only
technical work today was on the one thing I had decided not to work
on at the Recurse Center.&lt;sup id=&quot;fnref:non-project&quot;&gt;&lt;a href=&quot;#fn:non-project&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; While today was the first day, and it started
later and ended earlier than most days will, I’ll still need to keep a close watch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ann-pairing&quot;&gt;

      &lt;p&gt;I learned some Ruby syntax and we refactored a
guess-the-number-from-0-to-99 game. The absolute best part was where we wanted
to test something about the iteration, but won with 50 on the first try. The
program very accurately told us that we were ‘the best at this!’&lt;/p&gt;
      &lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;🏆 &lt;a href=&quot;http://t.co/PZVQRuX9bH&quot;&gt;pic.twitter.com/PZVQRuX9bH&lt;/a&gt;&lt;/p&gt;&amp;mdash; figuratively dying (@anyharder) &lt;a href=&quot;https://twitter.com/anyharder/status/603273545091817472&quot;&gt;May 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
      &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

      &lt;p&gt;&lt;a href=&quot;#fnref:ann-pairing&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:non-project&quot;&gt;

      &lt;p&gt;On the bright side, I finally got my 3-node &lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;etcd&lt;/a&gt; cluster running etcd2,
which was blocking further progress on that project. &lt;a href=&quot;#fnref:non-project&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 26 May 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/05/26/avoiding-distractions/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/05/26/avoiding-distractions/</guid>
        
        
      </item>
    
  </channel>
</rss>
