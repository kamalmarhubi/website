<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kamal Marhubi</title>
    <description></description>
    <link>http://kamalmarhubi.com/</link>
    <atom:link href="http://kamalmarhubi.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 08 Jul 2015 08:03:44 -0400</pubDate>
    <lastBuildDate>Wed, 08 Jul 2015 08:03:44 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recurse Center lab notes 2015-07-07: back to mmap; other people&#39;s code; things I&#39;m not meant to do while at RC</title>
        <description>&lt;p&gt;I went back to &lt;code&gt;mmap&lt;/code&gt; today. I am finally attempting to put together what I
picked up from experimenting in the last while towards writing a memory mapped
file message builder for Cap’n Proto. Current status:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve created a new class with a constructor &lt;code&gt;MmapMessageBuilder(int
fd)&lt;/code&gt; that maps the file descriptor&lt;/li&gt;
  &lt;li&gt;Things mostly magically work because I’m supplying an alternate
implementation of an interface&lt;/li&gt;
  &lt;li&gt;I am not yet handling the resizing of the backing file in any way&lt;/li&gt;
  &lt;li&gt;I am not yet including a segment table at the front of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last one means I can’t get the files read back in with the existing
deserializers. I was totally able to see it in the bytes though!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000000  00 00 00 00 00 00 01 00  01 00 00 00 57 00 00 00  |............W...|
00000010  08 00 00 00 01 00 04 00  7b 00 00 00 02 00 00 00  |........{.......|
00000020  21 00 00 00 32 00 00 00  21 00 00 00 92 00 00 00  |!...2...!.......|
00000030  29 00 00 00 17 00 00 00  39 00 00 00 22 00 00 00  |).......9...&quot;...|
00000040  c8 01 00 00 00 00 00 00  35 00 00 00 22 00 00 00  |........5...&quot;...|
00000050  35 00 00 00 82 00 00 00  39 00 00 00 27 00 00 00  |5.......9...&#39;...|
00000060  00 00 00 00 00 00 00 00  41 6c 69 63 65 00 00 00  |........Alice...|
00000070  61 6c 69 63 65 40 65 78  61 6d 70 6c 65 2e 63 6f  |alice@example.co|
00000080  6d 00 00 00 00 00 00 00  04 00 00 00 01 00 01 00  |m...............|
00000090  00 00 00 00 00 00 00 00  01 00 00 00 4a 00 00 00  |............J...|
000000a0  35 35 35 2d 31 32 31 32  00 00 00 00 00 00 00 00  |555-1212........|
000000b0  4d 49 54 00 00 00 00 00  42 6f 62 00 00 00 00 00  |MIT.....Bob.....|
000000c0  62 6f 62 40 65 78 61 6d  70 6c 65 2e 63 6f 6d 00  |bob@example.com.|
000000d0  08 00 00 00 01 00 01 00  01 00 00 00 00 00 00 00  |................|
000000e0  09 00 00 00 4a 00 00 00  02 00 00 00 00 00 00 00  |....J...........|
000000f0  09 00 00 00 4a 00 00 00  35 35 35 2d 34 35 36 37  |....J...555-4567|
00000100  00 00 00 00 00 00 00 00  35 35 35 2d 37 36 35 34  |........555-7654|
00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00001000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing out the segment table mostly requires trawling through someone else’s
code base. The Cap’n Proto code is fairly clear and well documented, especially
the user interfaces. Some key innards are not as well documented, however. In
particular, the &lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/1702050903e1038acf0556c6eabcf8f99702690d/c%2B%2B/src/capnp/arena.h#L197&quot;&gt;arena abstraction&lt;/a&gt; used to look after the
allocated segments could do with a short overview. I’m most of the way to
understanding how it fits together, but it’s been slower than I would have
liked.&lt;/p&gt;

&lt;p&gt;The process of understanding the code has been slowed by needing to learn the
&lt;a href=&quot;https://github.com/sandstorm-io/capnproto/tree/master/c%2B%2B/src/kj&quot;&gt;&lt;code&gt;kj&lt;/code&gt;&lt;/a&gt; library that Cap’n Proto makes heavy use of. I’m trying to find out
the boundaries of what &lt;code&gt;kj&lt;/code&gt; aims to be, but so far it looks to include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;replacements for some standard library classes, eg, &lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/1702050903e1038acf0556c6eabcf8f99702690d/c%2B%2B/src/kj/memory.h#L99&quot;&gt;&lt;code&gt;kj::Own&lt;/code&gt;&lt;/a&gt;
is used where you might use&lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/unique_ptr&quot;&gt; &lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;, and
there is a separate &lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/master/c%2B%2B/src/kj/io.h&quot;&gt;stream abstraction&lt;/a&gt; that is used instead of
&lt;a href=&quot;http://en.cppreference.com/w/cpp/io&quot;&gt;the standard one&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;an event loop—the C++ standard library still has nothing here; it may
in 2017 though!&lt;/li&gt;
  &lt;li&gt;some templated array classes that seem to be a pointer-length pair;
there is some macro magic to allow allocating such an array on the
stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An overview of this library would also be really nice to have. My life
would be a bit easier if this was all STL stuff.&lt;/p&gt;

&lt;p&gt;All this frustration has me trying to use Google’s &lt;a href=&quot;http://www.kythe.io/&quot;&gt;Kythe code indexing
project&lt;/a&gt; on Cap’n Proto. This in turn has me messing around with their
&lt;a href=&quot;http://bazel.io/&quot;&gt;Bazel build tool&lt;/a&gt;.  Both of these tools are up there on my
not-while-at-RC list, but I’m giving myself a very short pass to see if I can
port the build over.  Building these tools is pretty slow going…&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;current status: waiting for llvm to compile :/&lt;/p&gt;&amp;mdash; Kamal Marhubi (@kamalmarhubi) &lt;a href=&quot;https://twitter.com/kamalmarhubi/status/618613903593996289&quot;&gt;July 8, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 07 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/07/07/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/07/07/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-07-06: new Recursers, ES15, planning</title>
        <description>&lt;p&gt;Today was day one of the Summer 2 batch, meaning we got thirty new people! This
also means we had our first day without the Spring 2 batch, who I’ll definitely
miss. But several of them showed up for a games night so it’s almost like
they’re still here.&lt;/p&gt;

&lt;p&gt;It was interesting to see the intro talks again from six weeks in. A bit of
deja vu, and a good point to really stop and reflect. The advice from
the faculty was different the second time, even though the words were the same.
Our batch also gave advice or other thoughts to the new Recursers—Sophie
&lt;a href=&quot;https://sfrapoport.github.io/2015/07/06/Advice-for-Summer-2s.html&quot;&gt;jotted it all down&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ecmascript-15&quot;&gt;EcmaScript 15&lt;/h2&gt;

&lt;p&gt;The morning was taken up with welcoming the new batch, so it was a while until
I got back to programming. I decided to start learning JavaScript / ES15 with
[es6katas][]. There’s a lot of interdependence between the exercises! I started
off with the Arrays collection, but had to take a detour into destructuring. I
should have also taken a detour into iterables, as I wasn’t clear on what an
ES15 iterator was, and it was needed.&lt;/p&gt;

&lt;p&gt;So far ES15 looks pretty nice! I’m almost glad I put off learning JS for so
long. Destructuring is especially good. It’s similar to Python, but a bit more
versatile. The big features I noticed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;fields of objects can be destructured like so:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;let dessert = { name: &quot;eton mess&quot;, tasty: true };
let {name} = dessert;
console.log(name);  // =&amp;gt; &quot;eton mess&quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;It was a bit mysterious to me at first, but this also applies to fields on
builtin types, eg, &lt;code&gt;length&lt;/code&gt; on &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;let a = &quot;hi&quot;;
let {length} = a;
console.log(length);  // =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;(I just realised I should check if this works for properties with getters or
 not.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;you can choose a name to bind to different from the attribute name with a
colon, eg,&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;let a = &quot;hi&quot;;
let {length:l} = a;
console.log(l);  // =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;you can supply defaults when destructuring which is cool! It works when you
use the default name for a binding, as well as when you change it, eg,&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;let dessert = { name: &quot;eton mess&quot;, tasty: true };
let {dairyFree=false} = dessert;  // be safe and assume desserts contain dairy
console.log(dairyFree);  // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;all of this comes together most excellently in using destructuring on a
function argument, eg,&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;let dessert = { name: &quot;eton mess&quot;, tasty: true };
let eat = {name:n, tasty, dairyFree:df=false} =&amp;gt; {
    if (!df || !tasty) { console.log(&quot;no thanks!&quot;); return; }

    console.log(`mmm yes, I&#39;ll eat some ${n}!`);
}

eat(dessert);  // =&amp;gt; &quot;no thanks!&quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;The default arguments let you have default values in a nice succinct way, and
the binding renaming lets you have nice descriptive names in the interface but
abbreviate in the implementation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;planning-the-second-half-of-rc&quot;&gt;Planning the second half of RC&lt;/h2&gt;

&lt;p&gt;Towards the end of the day, I had a worry session with Tom, one of the
facilitators. The short of it is I’m worried I’m not going to complete as many
things as I want to. I’ve been getting a fair amount of stuff done, but aside
from &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr/&quot;&gt;&lt;code&gt;lsaddr&lt;/code&gt;&lt;/a&gt; I haven’t got much to show for it. While at RC I want
to get more comfortable completing things.&lt;/p&gt;

&lt;p&gt;Part of this is being afraid of spending too much time on a project that ends
up being too big for RC. Of course, at the other end of this, I’m also afraid
of spending too much of my time flitting between things. We ended up at the
idea of spending a solid day on each of 2-3 projects I have in mind to see
where I can get them.&lt;/p&gt;

&lt;p&gt;So, my plan for tomorrow is to take &lt;a href=&quot;http://kamalmarhubi.com/blog/2015/06/24/recurse-center-lab-notes/&quot;&gt;what I’ve learned about &lt;code&gt;mmap&lt;/code&gt;&lt;/a&gt; and start
putting it into a Cap’n Proto message builder that writes directly to a memory
mapped file. Wish me luck!&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/07/06/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/07/06/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>My favourite bug so far at the Recurse Center!</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://kamalmarhubi.com/blog/2015/06/29/recurse-center-lab-notes/#python-shell-writing-weirdness&quot;&gt;Yesterday’s shell weirdness mystery&lt;/a&gt;: solved! This was definitely my favourite
bug so far here at &lt;a href=&quot;https://www.recurse.com/&quot;&gt;RC&lt;/a&gt;, so it gets its own post!&lt;/p&gt;

&lt;p&gt;As a quick recap, &lt;a href=&quot;http://sfrapoport.github.io/&quot;&gt;Sophie&lt;/a&gt; and I were trying to get pipes to work in the shell
she was writing in Python. We ended up in a situation where &lt;code&gt;ls | head&lt;/code&gt; and &lt;code&gt;ls
| wc&lt;/code&gt; worked, but &lt;code&gt;yes | head&lt;/code&gt; did not. &lt;code&gt;head&lt;/code&gt; would terminate just fine, and
only ten lines of &lt;code&gt;y&lt;/code&gt; were printed, but &lt;code&gt;yes&lt;/code&gt; continued to run and consume lots
of CPU.&lt;/p&gt;

&lt;p&gt;Oh, and this happened on Sophie’s OS X machine, but not on my Linux one. Both were
running Python 2.7.10.&lt;/p&gt;

&lt;p&gt;To break this down a bit more, we’ve got four commands we’re dealing with: two
which produce data on standard output—&lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;yes&lt;/code&gt;—and two which consume
data on standard input—&lt;code&gt;wc&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; &lt;sup id=&quot;fnref:wc-head-stdout&quot;&gt;&lt;a href=&quot;#fn:wc-head-stdout&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. We can divide these
by whether they produce or consume a bounded or unbounded amount of data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;producers
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: bounded&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;yes&lt;/code&gt;: unbounded&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;consumers:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: bounded&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;wc&lt;/code&gt;: unbounded&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s look at the pipelines we were running again:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;producer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;consumer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;ls | head&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bounded&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bounded&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;ls | wc&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bounded&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unbounded&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;yes | head&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unbounded&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bounded&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Our issue comes up when we have an unbounded producer with a bounded consumer.
But only on OS X.&lt;/p&gt;

&lt;p&gt;So now we’re all caught up, here’s what happened today. Sophie messaged me this
morning saying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think I found something that will help us:
&lt;a href=&quot;http://www.chiark.greenend.org.uk/~cjwatson/blog/python-sigpipe.html&quot;&gt;http://www.chiark.greenend.org.uk/~cjwatson/blog/python-sigpipe.html&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;PS: I wouldn’t have found this if you hadn’t mentioned exploring SIGPIPE in
your blog post. I read about it and said, ‘I think we have a problem with
SIGPIPE on OSX/Python!’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; this because that wasn’t in the part of the post about our shell bug:
it was just pure coincidence!&lt;/p&gt;

&lt;p&gt;That page links to a &lt;a href=&quot;http://bugs.python.org/issue1615376&quot;&gt;bug against Python 3.2&lt;/a&gt;. She did some further
investigation and turned up a &lt;a href=&quot;http://bugs.python.org/issue1652&quot;&gt;bug against Python 2.7&lt;/a&gt; about this.
Sadly, this was closed as wontfix ‘because it is too late to backport this to 2.7.’&lt;/p&gt;

&lt;p&gt;The gist of the bugs is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python sets the disposition for &lt;code&gt;SIGPIPE&lt;/code&gt; to ignore, and instead checks the
return value of all its writes for errors; this allows raising exceptions in
Python code instead of requiring installation of a signal handler&lt;/li&gt;
  &lt;li&gt;signal dispositions and handlers are inherited by the child after &lt;code&gt;fork&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;execve&lt;/code&gt; resets signals with handlers to their default dispositions;
otherwise it leaves their dispositions alone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This results in a process &lt;code&gt;execve&lt;/code&gt;‘d from Python starting off ignoring
&lt;code&gt;SIGPIPE&lt;/code&gt;. Unless it resets its signal dispositions to the default, it will
receive errors instead of signals on writes to broken pipes. There are a couple
of fixes suggested in the bugs, but neither are applied in Python 2.7. Our
shell launches programs which ignore &lt;code&gt;SIGPIPE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’re getting closer!  All this sounds great, but it doesn’t explain the
works-on-Linux-but-not-on-OS X part. This is where it gets really fun. To quote
myself, just a few sentences ago: ‘Python sets the disposition for &lt;code&gt;SIGPIPE&lt;/code&gt; to
ignore, and &lt;em&gt;instead checks the return value of all its writes for errors&lt;/em&gt;’.
That last part is really important.&lt;/p&gt;

&lt;p&gt;At this point we realised we needed to check what &lt;code&gt;yes&lt;/code&gt; was actually doing. The
version on my machine comes from GNU coreutils. We can take a look at &lt;a href=&quot;https://sources.debian.net/src/coreutils/8.23-4/src/yes.c/#L80&quot;&gt;the loop
where it writes its output&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;  while (true)
    {
      int i;
      for (i = optind; i &amp;lt; argc; i++)
        if (fputs (argv[i], stdout) == EOF
            || putchar (i == argc - 1 ? &#39;\n&#39; : &#39; &#39;) == EOF)
          error (EXIT_FAILURE, errno, _(&quot;standard output&quot;));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at all that error checking! From &lt;a href=&quot;http://man7.org/linux/man-pages/man3/puts.3.html#RETURN_VALUE&quot;&gt;&lt;code&gt;man 3 puts&lt;/code&gt;&lt;/a&gt;, which
covers both &lt;code&gt;fputs&lt;/code&gt; and &lt;code&gt;putchar&lt;/code&gt;, we can see that they return &lt;code&gt;EOF&lt;/code&gt; on error;
and &lt;a href=&quot;http://man7.org/linux/man-pages/man3/error.3.html&quot;&gt;&lt;code&gt;error(3)&lt;/code&gt;&lt;/a&gt; prints out a nice error message.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.opensource.apple.com/source/shell_cmds/shell_cmds-170/yes/yes.c&quot;&gt;implementation of &lt;code&gt;yes&lt;/code&gt; on OS X&lt;/a&gt; is short enough that I can excerpt its entire &lt;code&gt;main&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;int
main(argc, argv)
    int argc;
    char **argv;
{
    if (argc &amp;gt; 1)
        for(;;)
            (void)puts(argv[1]);
    else for (;;)
        (void)puts(&quot;y&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at those unchecked calls to &lt;code&gt;puts&lt;/code&gt;! At last we have our answer! And to be
sure, I compiled the OS X version on my machine, and we got the same behaviour!
Mystery solved!&lt;/p&gt;

&lt;p&gt;I love this bug for so many reasons. In particular, I love that it involves so
many parties. There’s the Python bug. There’s the OS X &lt;code&gt;yes&lt;/code&gt; implementation
that doesn’t check its &lt;code&gt;puts&lt;/code&gt; calls’ return values. And it shouldn’t have to
for the pipe case since it can reasonably expect &lt;code&gt;SIGPIPE&lt;/code&gt; to have its default
action of terminating the process. Where this got confusing is that the GNU
implementation &lt;em&gt;does&lt;/em&gt; check for errors, so we got the OS difference. If Sophie
had been using Linux, we never would have encountered this!&lt;/p&gt;

&lt;p&gt;A big takeaway for me here is that it’s up to us as developers to deal with
idiosyncrasies in our platform. The fact that there’s an acknowledged bug in
Python doesn’t mean we can just throw up our hands in a big ¯\_(ツ)_/¯.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:wc-head-stdout&quot;&gt;

      &lt;p&gt;&lt;code&gt;wc&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; both also produce data on standard output, but only in
response to data on standard input; this isn’t interesting because of which
side of the pipe we put them on &lt;a href=&quot;#fnref:wc-head-stdout&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/30/my-favourite-bug-so-far-at-the-recurse-center/</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/30/my-favourite-bug-so-far-at-the-recurse-center/</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-29: fun with signals; confusing shell-writing</title>
        <description>&lt;h1 id=&quot;signals&quot;&gt;Signals&lt;/h1&gt;

&lt;p&gt;I finished skimming the chapter on signals in &lt;a href=&quot;http://www.apuebook.com/about3e.html&quot;&gt;Advanced Programming in the UNIX
Environmnent&lt;/a&gt;. This took me a few attempts over the last few days, and I
fell asleep reading it at least once. One big takeaway for me was the
distinction between synchronous and asynchronous signals. In a nutshell:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;synchronous signals&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;these signals are a direct result of execution; examples include

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;SIGFPE&lt;/code&gt; (stands for &lt;em&gt;f&lt;/em&gt;loating &lt;em&gt;p&lt;/em&gt;point &lt;em&gt;e&lt;/em&gt;xception), which is sent on
various errors in mathematical functions, such as dividing by zero&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;SIGPIPE&lt;/code&gt; (stands for… &lt;em&gt;pipe&lt;/em&gt;), which is sent if there’s a write to a pipe
with no readers&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;SIGSEGV&lt;/code&gt; (stands for &lt;em&gt;seg&lt;/em&gt;mentation &lt;em&gt;v&lt;/em&gt;iolation), which is sent
to a thread if it tries to access memory in a way it’s not allowed to, eg,
dereferencing a null pointer, reading read-protected memory like kernel memory&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;SIGBUS&lt;/code&gt; (&lt;em&gt;bus&lt;/em&gt; error, whatever that is meant to mean&lt;sup id=&quot;fnref:sigbus&quot;&gt;&lt;a href=&quot;#fn:sigbus&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;!), which is sent on
some types of memory access issues, eg, improper alignment, or—the one
that’s exciting to me—attempting to access memory mapped beyond the end of a
memory mapped file&lt;sup id=&quot;fnref:sigbus-openbsd&quot;&gt;&lt;a href=&quot;#fn:sigbus-openbsd&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;asynchronous signals&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;these signals can get sent independently of the running process or thread;
they just show up. Examples include:
- &lt;code&gt;SIGINT&lt;/code&gt; (&lt;em&gt;interrupt&lt;/em&gt;), which is sent when you interrupt a process from the
  keyboard with &lt;code&gt;^C&lt;/code&gt; at the terminal
- &lt;code&gt;SIGKILL&lt;/code&gt;, which is sent when you &lt;code&gt;kill -9&lt;/code&gt; something to kill it with fire;
  the process terminates, and the signal cannot be caught, blocked or ignored
- &lt;code&gt;SIGSTOP&lt;/code&gt;, which is sent when you stop a process with &lt;code&gt;^Z&lt;/code&gt; at the terminal;
  the process is stopped, and will continue when it’s sent a &lt;code&gt;SIGCONT&lt;/code&gt;
  (&lt;em&gt;cont&lt;/em&gt;inue)
- &lt;code&gt;SIGHUP&lt;/code&gt; (&lt;em&gt;h&lt;/em&gt;ang&lt;em&gt;up&lt;/em&gt;), which is sent if the controlling terminal ‘hangs up’,
  ie, is closed—this one is a fun anachronism which serves to us that we’re
  still using &lt;a href=&quot;https://en.wikipedia.org/wiki/Terminal_emulator&quot;&gt;programs that pretend to be terminals&lt;/a&gt;,
  which are in turn mostly pretending to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Teleprinter&quot;&gt;teletype machines&lt;/a&gt;, and that
  everything sort of pretends to be connected over a phone line&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h1 id=&quot;python-shell-writing-weirdness&quot;&gt;Python shell writing weirdness&lt;/h1&gt;

&lt;p&gt;Sophie asked me for some help with the mental model for file descriptors and
pipes and &lt;code&gt;dup2&lt;/code&gt; and what happens when you fork and other such fun things. There
is a really strange bug we couldn’t figure out: &lt;code&gt;ls | wc&lt;/code&gt; or &lt;code&gt;ls | head&lt;/code&gt; would
terminate as expected, but &lt;code&gt;yes | wc&lt;/code&gt; or &lt;code&gt;yes | head&lt;/code&gt; would not; &lt;code&gt;yes&lt;/code&gt; would
just keep on running and use loads of CPU, so it was not idle. On OS X only (2
machines tested). On Linux, it worked as expected, with &lt;code&gt;yes&lt;/code&gt; terminating and
complaining about the broken pipe. We gave up eventually, and I still haven’t
got any idea what’s wrong. I really wish &lt;a href=&quot;http://man7.org/linux/man-pages/man5/procfs.5.html&quot;&gt;&lt;code&gt;procfs&lt;/code&gt;&lt;/a&gt; existed on OS X!&lt;/p&gt;

&lt;p&gt;I wrote a minimized equivalent of our code. Please run it and let me know what
happens! On my machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://gist.githubusercontent.com/kamalmarhubi/65c2ea1063e479f0c16b/raw/2459725829891b156f61ec5fc808587846ec07be/pipe_weirdness.py &amp;gt; pipe_weirdness.py
$ chmod +x pipe_weirdness.py
$ ./pipe_weirdness yes head
y
y
y
y
y
y
y
y
y
y
yes: standard output: Broken pipe
yes: write error
$ █
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m really interested in ideas on why &lt;code&gt;yes&lt;/code&gt; wouldn’t terminate!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sigbus&quot;&gt;

      &lt;p&gt;I think this is meant to be related to the memory bus, which makes sense for
unaligned accesses, but not for the memory mapped file situtuation. &lt;a href=&quot;#fnref:sigbus&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sigbus-openbsd&quot;&gt;

      &lt;p&gt;From man pages and some experimentation, &lt;code&gt;SIGBUS&lt;/code&gt; is sent for this
situation on Linux, FreeBSD, OS X, and NetBSD; OpenBSD’s documentation says a
&lt;code&gt;SIGSEGV&lt;/code&gt; is sent instead. Feel free to &lt;a href=&quot;https://gist.github.com/kamalmarhubi/d8a3b3754bc2f4f62899&quot;&gt;test it out&lt;/a&gt; on your system! On mine:&lt;/p&gt;

      &lt;pre&gt;&lt;code&gt;$ curl https://gist.githubusercontent.com/kamalmarhubi/d8a3b3754bc2f4f62899/raw/333a1c8ebce4a3c7718e740ea4d175d22ca206fd/mmap_signal_test.c | cc -xc -o mmap_signal_test -
$ ./mmap_signal_test
Received signal while accessing 0x7facd3268000: Bus error
Going to ftruncate
Read: 0
Wrote and read: 1
$ █
&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;&lt;a href=&quot;#fnref:sigbus-openbsd&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/29/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/29/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-24: playing with mmap</title>
        <description>&lt;p&gt;Today I wrote some code! None to show, just experiments. I’m investigating
&lt;code&gt;mmap&lt;/code&gt; and its interactions with &lt;code&gt;mprotect&lt;/code&gt; and &lt;code&gt;ftruncate&lt;/code&gt;. I got some good
responses to yesterday’s email thinking about approaches to a memory mapped
message builder for Cap’n Proto. In particular &lt;a href=&quot;https://groups.google.com/d/msg/capnproto/kLQOsxjkjxM/u8iNvbd6c6wJ&quot;&gt;a message from Paul
Pelzl&lt;/a&gt; expanded on my memory protection / &lt;code&gt;SIGSEGV&lt;/code&gt;-based idea
and suggested playing tricks with &lt;code&gt;MAP_FIXED&lt;/code&gt; to repeatedly remap the file as
it grows.&lt;/p&gt;

&lt;p&gt;I started doing some investigation to see what happens when you mix &lt;code&gt;mmap&lt;/code&gt;,
&lt;code&gt;mprotect&lt;/code&gt;, and &lt;code&gt;ftruncate&lt;/code&gt;. Here’s some stuff I found out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it is possible to create a non-zero length mapping with &lt;code&gt;mmap&lt;/code&gt; on a
zero-length file, eg, one just created by &lt;code&gt;touch&lt;/code&gt; for the purpose&lt;/li&gt;
  &lt;li&gt;on Linux, attempts to access any of the memory result in &lt;code&gt;SIGBUS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a &lt;code&gt;SIGBUS&lt;/code&gt; handler can call &lt;code&gt;ftruncate&lt;/code&gt; to extend the backing file; the
access will then succeed!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This suggests an even simpler approach than what emerged on the mailing list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;mmap&lt;/code&gt; a huge amount of address space backed by the target file, which
starts off empty&lt;/li&gt;
  &lt;li&gt;allocate an initial segment of 4GB—the maximum in Cap’n Proto’s encoding&lt;/li&gt;
  &lt;li&gt;have a &lt;code&gt;SIGBUS&lt;/code&gt; handler call &lt;code&gt;ftruncate&lt;/code&gt; to extend the file whenever an
attempt is made to reach beyond the end&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An initial page can be set aside for a segment table to allow compatibility
with the existing message readers. On closing of the file, the segment size can
be written in at whatever length was actually set aside on disk. There would
likely be an opportunity to shrink the segment down so it only occupies as much
space as was actually used; in this case the file could be truncated to that
size.&lt;/p&gt;

&lt;p&gt;This approach has a few nice features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it’s compatible with the existing flat array and stream based message readers&lt;/li&gt;
  &lt;li&gt;it does not require sparse file support&lt;/li&gt;
  &lt;li&gt;only one system call needs to be made in the signal handler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still need to do a bit more research. In particular, I’m wondering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;will this work on non-Linux systems? The &lt;a href=&quot;http://man7.org/linux/man-pages/man2/mmap.2.html&quot;&gt;Linux &lt;code&gt;mmap&lt;/code&gt; manpage&lt;/a&gt;
mentions the &lt;code&gt;SIGBUS&lt;/code&gt; behaviour, as does &lt;a href=&quot;http://netbsd.gw.com/cgi-bin/man-cgi?mmap++NetBSD-current&quot;&gt;the NetBSD one&lt;/a&gt;, but
&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=mmap&amp;amp;sektion=2&quot;&gt;the FreeBSD&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/mmap.2.html&quot;&gt;OS X&lt;/a&gt; manpages do not; &lt;a href=&quot;http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man2/mmap.2?query=mmap&amp;amp;arch=i386&quot;&gt;OpenBSD’s
manpage&lt;/a&gt; says it will give a &lt;code&gt;SIGSEGV&lt;/code&gt; instead, and helpfully
points out that POSIX says this situation should be a &lt;code&gt;SIGBUS&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;how do I keep track of which regions belong to which files? The signal handler
has the address that called the fault, but I’ll have to have some way to look
it up.&lt;/li&gt;
  &lt;li&gt;how should the filis file lookup structure interact with threads? Is it a
global table for which we incur some synchronisation cost? Is it a
thread-local table, and we require that a message only be written to by the
creating thread?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m hoping to answer at least the first question tomorrow, mostly for
curiosity’s sake. I’m happy to be Linux-only for now; I’m sure that if this
doesn’t work on other platforms, one of the other approaches will. After
testing this on someone’s Mac, I can start on a proof of concept message
builder, which will hopefully inform the design more.&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/24/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/24/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-23</title>
        <description>&lt;p&gt;My output today was to write &lt;a href=&quot;https://groups.google.com/d/msg/capnproto/kLQOsxjkjxM/ngbJYer52OwJ&quot;&gt;an email&lt;/a&gt;. I did a whole bunch of reading
up on memory mapped files and handling page faults to get to that point, so I
wasn’t exactly idle—just outputless. I need to remember that it still counts
and being productive, and making good use of time!&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/23/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/23/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-22</title>
        <description>&lt;p&gt;Today was slightly slow. I re-remembered why it’s a good idea to leave
things incomplete at the end of the day or week: it gives you somewhere
to start. I consider &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr&quot;&gt;&lt;code&gt;lsaddr&lt;/code&gt;&lt;/a&gt; to be more or less feature
complete at this point, at least for a ‘1.0’. That was the state on
Friday, and is still the state today. If something was left, I would
have had an immediate place to start this morning.&lt;/p&gt;

&lt;p&gt;I wasn’t feeling like going back to IPC benchmarking immediately, so I
ended up deciding to run a version of my &lt;a href=&quot;https://github.com/kamalmarhubi/shell-workshop&quot;&gt;Let’s Build a
Shell!&lt;/a&gt; workshop. I’ve been wanting to do this for a while,
since I think it’s a pretty good way to get a deeper understanding of
how our programs are run. I need to file some issues to improve the
documentation a little, but I remain pretty pleased with how it’s set
up. Good job past me!&lt;/p&gt;

&lt;p&gt;After the workshop, I spent a bit of time deciding what to do next. I
think I’ve settled on adding a memory mapped message builder to &lt;a href=&quot;https://capnproto.org/&quot;&gt;Cap’n
Proto&lt;/a&gt;’s C++ library. This was requested in a &lt;a href=&quot;https://groups.google.com/d/topic/capnproto/kLQOsxjkjxM/discussion&quot;&gt;recent mailing
list posting&lt;/a&gt;. It’ll get me poking at the innards of
Cap’n Proto a little, which would be good for one of my potential bigger
project ideas for my time at RC: a shared memory transport for &lt;a href=&quot;https://capnproto.org/rpc.html&quot;&gt;Cap’n
Proto RPC&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/22/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/22/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-18</title>
        <description>&lt;p&gt;Lots of progress on &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr&quot;&gt;&lt;code&gt;lsaddr&lt;/code&gt;&lt;/a&gt; today! Unlike yesterday, most of these
commits are writing code rather than poking at it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --since=yesterday --reverse --oneline
0a695b0 Get IPv6 addresses from /proc/net/if_inet6
683d9c2 Fix typo in Makefile
8d61702 Add debug target to Makefile
686995b Add --list-interfaces option
8f2d3c4 Sort output of --list-interfaces
db95d00 Comment why we replace colon with null
ccf04d5 Introduce struct str_list to remove need for triple pointers
2209807 Use struct str_list in struct args
99cc8db Check interfaces exist using entries from /proc/net/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some highlights: I now feel like I’ve got this &lt;code&gt;lfind&lt;/code&gt; thing under control: I’m
using it to filter non-existent interfaces from the user’s arguments, as well
as to make sure I only output IP addresses for the specified interfaces. I also
implemented a &lt;code&gt;--list-interfaces&lt;/code&gt; option that does what it says. All this
information is pretty scattered and disorganised. Here are my sources:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;/proc/net/dev&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;contains a list of interfaces and some other data in a fairly
parse-unfriendly layout—two header rows, and the interface names have a colon
appended&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;/proc/net/if_inet6&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;contains a list of IPv6 addresses along with some other data in a more
parse-friendly format, except that the IP addresses are given as 128-bits
hex-encoded, no colons and no zero-contractions—not ready for human
consumption&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;ioctl(SIOCGIFCONF)&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;a system call that needs to be made on a socket file descriptor to get a list
of interfaces with IPv4 addresses as &lt;code&gt;struct sockaddr_in&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;So far &lt;code&gt;--include-loopback&lt;/code&gt; and &lt;code&gt;--include-link-local&lt;/code&gt; don’t do anything. I
started some refactoring to make them easier to impelment. I should be able to
get this wrapped up pretty soon!&lt;/p&gt;

&lt;p&gt;I also gave a presentation on writing manpages with &lt;a href=&quot;http://asciidoc.org/&quot;&gt;AsciiDoc&lt;/a&gt;. The tl;dr was
that it’s really easy! Take a look at the &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr/blob/master/lsaddr.1.txt&quot;&gt;AsciiDoc source&lt;/a&gt; for
the &lt;code&gt;lsaddr&lt;/code&gt; manpage. It starts off:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsaddr(1)
=======

NAME
----
lsaddr - list active IP addresses

SYNOPSIS
--------
[verse]
*lsaddr* [ *-46* ] [*--include-loopback*] [*--include-ipv6-link-local*] [ _interface_ ... ]
*lsaddr --list-interfaces*

DESCRIPTION
-----------
List IP addresses of the specified __interface__s. By default, lists all IPv4
and IPv6 addresses, with the loopback interfaces and IPv6 link-local omitted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here’s a screenshot of the formatted output in my terminal:
&lt;img src=&quot;/static/lsaddr-manpage.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now. I should be getting back to IPC stuff soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/18/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/18/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-17</title>
        <description>&lt;p&gt;Not a lot to report today: I overslept and only got in at 11, and then left at
6 to go ringing. I did bring another recurser—Jess—along with me, so that was
cool. I think she’ll be back, too! I left ringing early to go and checkout the
&lt;a href=&quot;http://www.keyboard.io/&quot;&gt;Keyboardio Model 01&lt;/a&gt; in midtown. It’s a very attractive piece of
hardware, and has me tempted to order one. I’ll need a second keyboard at some
point, right?&lt;/p&gt;

&lt;p&gt;On the &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr&quot;&gt;&lt;code&gt;lsaddr&lt;/code&gt;&lt;/a&gt; front, I figured out how to make &lt;code&gt;lfind&lt;/code&gt; go. I don’t understand
why, but I’ll take my win for now. I’m also parsing &lt;code&gt;/proc/net/if_inet6&lt;/code&gt; to get
IPv6 addresses, though not yet including them in the output. I mostly pushed
characters around in source files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --since=yesterday --reverse --oneline
a08386b Fix typo in manpage
16fbff4 Change int to size_t in a couple of places
69300ac Use designated initializers instead of statements
614ef75 Rename ipv4_fd to sockfd and use AF_INET6
8d9aacc Check interface arguments exist
d21ecec Run clang-format
8f9fb9c Properly handle user specified interfaces
6d75545 Comment the repeated ioctl(SIOCGIFCONF)
3f03089 Improve handling of unspecified arguments
88a2eb5 Reformat struct initializer
8ea9224 Properly handle the IP version flags (IPv4 only)
bf08afa Move manpage doctype to a flag to a2x
cef15c4 Change manpage source file suffix to .1.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tomorrow’s work on &lt;code&gt;lsaddr&lt;/code&gt; will be to finish off IPv6 listing first thing in
the morning, and then do some restructuring to make option handling easier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get list of interfaces from /proc/net/dev
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;int list_interfaces(char ***interfaces, size_t *num_interfaces);&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;check against that list instead of using &lt;code&gt;ioctl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;have a &lt;code&gt;struct address { char [ADDRESSBUFLEN] addr, char [IFNAMSIZ]
interface, enum {ipv4 = 4, ipv6 = 6} ip_version }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;have an array of &lt;code&gt;struct address&lt;/code&gt; sorted by interface, version, addr&lt;/li&gt;
  &lt;li&gt;internal list of interfaces with pointers into list of &lt;code&gt;struct address&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other random things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I read &lt;a href=&quot;https://docs.google.com/document/pub?id=1IC9yOXj7j6cdLLxWEBAGRL6wl97tFxgjLUEHIX3MSTs&quot;&gt;Introducing the Journal&lt;/a&gt;, the post introducing &lt;code&gt;journald&lt;/code&gt;.
I’m new to this &lt;code&gt;systemd&lt;/code&gt; world so it was interesting to get some background.
The ‘frequently asked questions’ are pretty terrible though, in that
intending-to-be-funny-but-mostly-condescending way that’s a bit too common in
tech.&lt;/li&gt;
  &lt;li&gt;I went to yoga in the early afternoon, which was a good idea. I need to go
more often. Physical activity is good.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 17 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/17/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/17/recurse-center-lab-notes</guid>
        
        
      </item>
    
      <item>
        <title>Recurse Center lab notes 2015-06-16</title>
        <description>&lt;p&gt;Today I continued working on my &lt;code&gt;lsaddr&lt;/code&gt; utility for listing IP addresses.
Here’s a quick update:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there is now a &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr&quot;&gt;repository on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I have a &lt;a href=&quot;https://github.com/kamalmarhubi/lsaddr/blob/master/lsaddr.adoc&quot;&gt;man page&lt;/a&gt; that I’m mostly pleased with; here’s the
synopsis:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;
lsaddr [ -46 ] [--include-loopback] [--include-ipv6-link-local] [ interface ... ]
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I am checking that the supplied interfaces exist and reporting errors with
&lt;a href=&quot;http://linux.die.net/man/3/error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt;, which I discovered was the done thing by using &lt;code&gt;ltrace&lt;/code&gt; on
&lt;code&gt;ls does-not-exist&lt;/code&gt; :-)&lt;/li&gt;
  &lt;li&gt;I tried to use &lt;a href=&quot;http://linux.die.net/man/3/lfind&quot;&gt;&lt;code&gt;lfind&lt;/code&gt;&lt;/a&gt; to determine if interfaces were listed as
arguments, but wow what a mess that was&lt;sup id=&quot;fnref:lfind-mess&quot;&gt;&lt;a href=&quot;#fn:lfind-mess&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;; I scrapped that to come
back to it another day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other news, I read &lt;a href=&quot;http://www.brendangregg.com/blog/2015-05-15/ebpf-one-small-step.html&quot;&gt;this exciting post&lt;/a&gt; by Brendan Gregg on eBPF
and tracing in the kernel. Apparently it will soon be possible to gather
latency data from inside the kernel. I haven’t figured out if this could be
interesting for IPC benchmarks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:lfind-mess&quot;&gt;

      &lt;p&gt;the closest C comes to having generics / parametric polymorphism is
&lt;code&gt;void *&lt;/code&gt;. With things like &lt;a href=&quot;http://linux.die.net/man/3/malloc&quot;&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/a&gt;, this is mostly fine. With algorithms
like &lt;code&gt;lfind&lt;/code&gt; and friends… well you’re going to have a bad time. Just look
a this signature:&lt;/p&gt;

      &lt;p&gt;&lt;code&gt;
void *lfind(const void *key, const void *base, size_t *nmemb,
            size_t size, int(*compar)(const void *, const void *))
&lt;/code&gt;&lt;/p&gt;

      &lt;p&gt;I find &lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/find&quot;&gt;&lt;code&gt;std::find&lt;/code&gt;&lt;/a&gt; unfriendly, but this is a whole other level. &lt;a href=&quot;#fnref:lfind-mess&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 16 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://kamalmarhubi.com/blog/2015/06/16/recurse-center-lab-notes</link>
        <guid isPermaLink="true">http://kamalmarhubi.com/blog/2015/06/16/recurse-center-lab-notes</guid>
        
        
      </item>
    
  </channel>
</rss>
